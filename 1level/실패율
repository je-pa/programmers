class Solution {
    public int[] solution(int N, int[] stages) {
        int[] answer = new int[N];
        double[] p = new double[N];
        double[] p_sort = new double[N];
        for(int i=1;i<=N;i++){
            int failCount=0;
            int cCount=0;
            for(int j=0;j<stages.length;j++){
                if(stages[j]>=i){
                    cCount++;    
                }
                if(stages[j]==i){
                    failCount++;
                }
            }
            if(cCount!=0){
                p[i-1]=(double)failCount/cCount;
            }else{
                p[i-1]=0;
            }
        }
        
        for(int i=0;i<N;i++){p_sort[i]=p[i];}
        
        for(int i=0;i<N-1;i++){
            double temp=0;
            for(int j=i+1;j<N;j++){
                if(p_sort[i]<p_sort[j]){
                    temp=p_sort[i];
                    p_sort[i]=p_sort[j];
                    p_sort[j]=temp;
                }
            }
        }
        
        for(int i=0;i<N;i++){
            //int index = p.indexOf(p_sort[i]);
            for(int j=0;j<N;j++){
                if(p_sort[i]==p[j]){
                    answer[i]=j+1;
                    p[j]=-1;
                    break;
                }
            }
            
        }
        return answer;  
    } 
}


 /*System.out.printf("cCount=%d , failCount=%d, result=%f\n"
                              ,cCount,failCount,(double)failCount/cCount);*/

        /*
        for(int i=0;i<N;i++){
            System.out.print(p_sort[i]+" "+p[i]+" /");
        }*/
